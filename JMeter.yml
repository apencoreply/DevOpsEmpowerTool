
# stages:
# - stage: JMeterTest
#   displayName: JMeter Test stage
#   dependsOn: Deploy
#   condition: and(succeeded(), eq('${{ parameters.JMeter }}', 'true'))
parameters:
  - name: threads
    type: string
    default: '10'
  - name: rampup
    type: string
    default: '1'
  - name: loops
    type: string
    default: '10'

jobs:
- job: Test
  displayName: Test
  pool:
    vmImage: 'windows-2019'

  steps:
  - task: PowerShell@2
    displayName: 'Install Apache JMeter'
    inputs:
      targetType: 'inline'
      script: |
        $jmeterZipUrl = 'https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.5.zip'
        $jmeterZipPath = '$(System.DefaultWorkingDirectory)/jmeter.zip'
        $jmeterExtractPath = '$(System.DefaultWorkingDirectory)/jmeter'

        Invoke-WebRequest -Uri $jmeterZipUrl -OutFile $jmeterZipPath
        Expand-Archive -Path $jmeterZipPath -DestinationPath $jmeterExtractPath -Force
  
  - task: PowerShell@2
    displayName: 'Set parameters runtime'
    inputs:
      targetType: 'inline'
      script: |
        $filePath = "$(System.DefaultWorkingDirectory)/*.jmx"
        $threads = "$(${{ parameters.threads }})"
        $rampup = "$(${{ parameters.rampup }})"
        $loops = "$(${{ parameters.loops }})"
        $content = Get-Content -Path $filePath -Raw

        $newContent = $content -replace "<stringProp name=`"ThreadGroup.num_threads`">10</stringProp>", "<stringProp name=`"ThreadGroup.num_threads`">$threads</stringProp>"
        $newContent = $newContent -replace "<stringProp name=`"ThreadGroup.ramp_time`">1</stringProp>", "<stringProp name=`"ThreadGroup.ramp_time`">$rampup</stringProp>"
        $newContent = $newContent -replace "<stringProp name=`"LoopController.loops`">10</stringProp>", "<stringProp name=`"LoopController.loops`">$loops</stringProp>"

        $newContent | Set-Content -Path $filePath
  
  - script: |
      $(System.DefaultWorkingDirectory)/jmeter/apache-jmeter-5.5/bin/jmeter -n -t $(System.DefaultWorkingDirectory)/*.jmx -l $(System.DefaultWorkingDirectory)/test_summary.jtl > $(System.DefaultWorkingDirectory)/summary.txt
    displayName: 'Run JMeter Test'
  - task: PythonScript@0
    inputs:
      scriptSource: 'inline'
      script: |
        def filter_lines_with_summary(file_path):
          filtered_lines = []
          with open(file_path, 'r') as file:
              for line in file:
                  if line.startswith('summary'):
                      filtered_lines.append(line)
                      
          # Write the filtered lines back to the same file
          with open(file_path, 'w') as file:
              for line in filtered_lines:
                  file.write(line)
            
        summary = r'$(System.DefaultWorkingDirectory)/summary.txt'
        filter_lines_with_summary(summary)

        def remove_lines_with_200_ok(file_path):
          filtered_lines = []
          with open(file_path, 'r') as file:
              for line in file:
                  if '200,OK' not in line:
                      filtered_lines.append(line)
          
          # Write the filtered lines back to the same file
          with open(file_path, 'w') as file:
              for line in filtered_lines:
                  file.write(line)

        test_summary = r'$(System.DefaultWorkingDirectory)/test_summary.jtl'
        remove_lines_with_200_ok(test_summary)
      
        def concatenate_files(input_file1, input_file2, output_file):
          with open(input_file1, 'r') as file1, open(input_file2, 'r') as file2:
              content1 = file1.read()
              content2 = file2.read()

          with open(output_file, 'w') as output:
              # Write the lines at the beginning of the output file
              output.write("Result from the JTL file from the JMeter test in which are saved the errors and the description:\n")
              output.write("---\n")
              
              # Write the content of the first file
              output.write(content1)
              
              # Write the lines after the content of the first file
              output.write("\n---\n")
              output.write("Summary results:\n")
              output.write("---\n")
              
              # Write the content of the second file
              output.write(content2)
              output.write("\n---\n")
        output_file_path =  r'$(System.DefaultWorkingDirectory)/TestResults.txt'

        concatenate_files(test_summary, summary, output_file_path)
    

  - task: PowerShell@2
    displayName: 'Prepare JTL Results and Function Code'
    inputs:
      targetType: 'inline'
      script: |
        echo "JMX file:"
        cat "$(System.DefaultWorkingDirectory)/*.jmx"
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/TestResults.txt'
      artifact: 'JTLResults'
