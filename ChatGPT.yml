
# stages:
# - stage: ChatGPT
#   displayName: ChatGPT stage
#   dependsOn: JMeterTest
#   condition: and(succeeded(), eq('${{ parameters.ChatGPT }}', 'true'))

parameters:
  - name: tokens
    type: string
    default: '1000'
  - name: temperature
    type: string
    default: '0.7'
  - name: apiKey
    type: string
    default: ''
  - name: apiUrl
    type: string
    default: ''
  - name: EmailUsername
    type: string
    default: ''
  - name: EmailPassword
    type: string
    default: ''
  - name: EmailUsernameRecipient
    type: string
    default: ''
  - name: EmailAPIKEY
    type: string
    default: ''
  - name: workingDir
    type: string
    default: '$(System.DefaultWorkingDirectory)'

jobs:
- job: Chat
  displayName: ChatGPT
  pool:
    vmImage: $(vmImageName)
  
  steps:
  - task: DownloadPipelineArtifact@2
    displayName: 'Download JTL Results Artifact'
    inputs:
      artifactName: 'JTLResults'
      targetPath: '$(System.DefaultWorkingDirectory)'
    
  - task: PowerShell@2
    displayName: 'Prepare JTL Results and Function Code'
    variables:
      workingDir: ${{ parameters.workingDir }}
    inputs:
      targetType: 'inline'
      script: |
        $workingDir = "$(workingDir)" # Retrieve the value saved in the variable
        echo "Function Code:"
        cat "$workingDir"/*.cs
        cat "$workingDir"/*.cs > "$workingDir/function_code.txt"
        echo "JTL Results:"
        cat "$(System.DefaultWorkingDirectory)/test_summary.jtl"
        cat "$(System.DefaultWorkingDirectory)/test_summary.jtl" > "$(System.DefaultWorkingDirectory)/jtl_results.txt"

  - task: PowerShell@2
    displayName: 'List contents of DefaultWorkingDirectory'
    inputs:
      targetType: 'inline'
      script: |
        $directory = "$(System.DefaultWorkingDirectory)"
        Get-ChildItem -Path $directory

  - task: PowerShell@2
    displayName: 'Call ChatGPT API'
    inputs:
      targetType: 'inline'
      script: |
        $jtlResultsFile = "$(System.DefaultWorkingDirectory)/jtl_results.txt"
        $functionCodeFile = "$(System.DefaultWorkingDirectory)/function_code.txt"
        $apiKey = "${{ parameters.apiKey }}"
        $apiUrl = "${{ parameters.apiUrl }}"
        $tokens = [double]"$(${{ parameters.tokens }})"
        $temperature = [int]"$(${{ parameters.temperature }})"

        # Read JTL results
        $jtlResults = Get-Content -Path $jtlResultsFile

        # Read function code
        $functionCode = Get-Content -Path $functionCodeFile

        # Prepare payload for API request
         $payload = @{
            messages = @(
              @{ role = 'system'; content = 'You are a system that analyzes source code and JMeter results to assist any type of developer in enhancing and improving performance in the code.' },
              @{ role = 'user'; content = "Provide me exmaple on how could improve the snippet of code, based on Function code and JTL Results:\n----\nJTL Results:\n---\n$jtlResults\n---\nFunction Code:\n---\n$functionCode\n---\n----"}
            )
            temperature = $temperature
            max_tokens = $tokens
        }
        $payloadJson = $payload | ConvertTo-Json

        # Make API request
        $headers = @{
            "Content-Type" = "application/json"
            "api-key" = $apiKey
        }
        $response = Invoke-RestMethod -Uri $apiUrl -Headers $headers -Method Post -Body $payloadJson
        # Process the API response as needed
        # For example, extract and utilize the generated text
        $generatedText = $response.choices[0].message.content

        # Display the generated text
        Write-Host $generatedText

        $generatedText | Out-File "$(System.DefaultWorkingDirectory)/generatedText.md" -Encoding utf8

  
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      addToPath: true
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      pip install requests
    displayName: 'Install requests'
    
  - task: PythonScript@0
    inputs:
      scriptSource: 'inline'
      script: |
        import requests
        
        bot_token = '6096186625:AAHcTptWfiK5CIAmSEcmjEtpfJA1oiKGR_Q'
        chat_id = '549538016'
        document_path = r'$(System.DefaultWorkingDirectory)/generatedText.md'
        caption = 'Check out this document!'
        
        api_url = f'https://api.telegram.org/bot{bot_token}/sendDocument'
        
        with open(document_path, 'rb') as document:
            files = {'document': document}
            payload = {
                'chat_id': chat_id,
                'caption': caption
            }
            response = requests.post(api_url, files=files, data=payload)
        
        # Check the response status code or content for errors
        print(response.status_code, response.content)
