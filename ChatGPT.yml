parameters:
  - name: tokens
    type: string
    default: '4000'
  - name: temperature
    type: string
    default: '0.7'
  - name: model
    type: string
    default: 'GPT4'
  - name: workingDir
    type: string
    default: '$(System.DefaultWorkingDirectory)'
  - name: caption
    type: string
    default: 'Checkout our suggestions!'
  - name: chatid
    type: string
    default: '549538016'
  - name: azSubscription
    type: string
    default: ''
    

jobs:
- job: OpenAi
  displayName: OpenAi
  pool:
    vmImage: 'windows-2019'
  
  steps:
  - task: DownloadPipelineArtifact@2
    displayName: 'Download JTL Results Artifact'
    inputs:
      artifactName: 'JTLResults'
      targetPath: '$(System.DefaultWorkingDirectory)'

  # - task: PowerShell@2
  #   displayName: 'Prepare JTL Results and Function Code'
  #   inputs:
  #     targetType: 'inline'
  #     script: |
  #       $workingDir = "${{ parameters.workingDir }}"
  #       echo "Function Code:"
  #       cat "$workingDir/*.cs"
  #       echo "JTL Results:"
  #       cat "$(System.DefaultWorkingDirectory)/TestResults.txt"

  - task: AzureKeyVault@2
    inputs:
      azureSubscription: '${{ parameters.azSubscription }}'
      KeyVaultName: 'DevEmpower'
      SecretsFilter: '${{ parameters.model }}-KEY,${{ parameters.model }}-URL'
      RunAsPreJob: false

  - task: PowerShell@2
    displayName: 'Call ChatGPT API'
    inputs:
      targetType: 'inline'
      script: |
        $jtlResultsFile = "$(System.DefaultWorkingDirectory)/TestResults.txt"  
        $functionCodeFile = "${{ parameters.workingDir }}/*.cs"  
        $apiKey = "$(${{ parameters.model }}-KEY)"
        $apiUrl = "$(${{ parameters.model }}-URL)"

        # Read JTL results
        $jtlResults = Get-Content -Path $jtlResultsFile

        # Read function code
        $functionCode = Get-Content -Path $functionCodeFile

        # Prepare payload for API request
        #"Provide me example on how could improve the snippet of code, based on Function code and JTL Results:",  
        #"Provide improved implementation example taking into account the following:",
        #'You are a system that analyzes source code and JMeter results to assist any type of developer in enhancing and improving performance in the code.'
        $payload = @{
          messages = @(
            @{role = "system";content= "You are a system that analyzes source code and JMeter results to assist any type of developer in enhancing and improving performance in the code."},
            @{role = "user";content= "Provide improved implementation example taking into account the following:\n----\nJTL Results:\n---\nResult from the JTL file from the JMeter test in which are saved the errors and the description: --- timeStamp,elapsed,label,responseCode,responseMessage,threadName,dataType,success,failureMessage,bytes,sentBytes,grpThreads,allThreads,URL,Latency,IdleTime,Connect 1693232919987,8580,HTTP Request,404,Not Found,Thread Group 1-1,,false,,82,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=240,8578,0,4539 1693232919987,8580,HTTP Request,404,Not Found,Thread Group 1-2,,false,,82,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=579,8578,0,4533 1693232920587,7981,HTTP Request,404,Not Found,Thread Group 1-10,,false,,82,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=397,7979,0,3943 1693232919988,8580,HTTP Request,404,Not Found,Thread Group 1-3,,false,,82,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=651,8576,0,4536 1693232920088,8480,HTTP Request,404,Not Found,Thread Group 1-5,,false,,82,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=201,8476,0,4441 1693232919988,8580,HTTP Request,404,Not Found,Thread Group 1-4,,false,,82,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=595,8578,0,4540 1693232920389,8179,HTTP Request,404,Not Found,Thread Group 1-8,,false,,82,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=364,8177,0,4134 1693232920187,8381,HTTP Request,404,Not Found,Thread Group 1-6,,false,,82,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=846,8379,0,4338 1693232920487,8081,HTTP Request,404,Not Found,Thread Group 1-9,,false,,82,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=884,8077,0,4039 1693232928571,183,HTTP Request,404,Not Found,Thread Group 1-1,,false,,150,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=871,183,0,0 1693232928572,240,HTTP Request,404,Not Found,Thread Group 1-7,,false,,150,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=915,240,0,0 1693232928812,165,HTTP Request,404,Not Found,Thread Group 1-7,,false,,150,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=916,165,0,0 1693232928978,163,HTTP Request,404,Not Found,Thread Group 1-7,,false,,150,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=574,163,0,0 1693232929142,352,HTTP Request,404,Not Found,Thread Group 1-7,,false,,150,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=156,352,0,0 1693232928755,742,HTTP Request,404,Not Found,Thread Group 1-1,,false,,150,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=717,742,0,0 1693232929497,162,HTTP Request,404,Not Found,Thread Group 1-1,,false,,150,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=725,162,0,0 1693232929494,167,HTTP Request,404,Not Found,Thread Group 1-7,,false,,150,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=414,167,0,0 1693232929660,167,HTTP Request,404,Not Found,Thread Group 1-1,,false,,150,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=919,167,0,0 1693232929663,164,HTTP Request,404,Not Found,Thread Group 1-7,,false,,150,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=317,164,0,0 1693232929827,198,HTTP Request,404,Not Found,Thread Group 1-7,,false,,150,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=709,198,0,0 1693232929828,203,HTTP Request,404,Not Found,Thread Group 1-1,,false,,150,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=874,203,0,0 1693232930026,167,HTTP Request,404,Not Found,Thread Group 1-7,,false,,150,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=669,167,0,0 1693232930031,163,HTTP Request,404,Not Found,Thread Group 1-1,,false,,150,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=130,163,0,0 1693232930194,163,HTTP Request,404,Not Found,Thread Group 1-7,,false,,150,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=186,163,0,0 1693232930194,164,HTTP Request,404,Not Found,Thread Group 1-1,,false,,150,152,10,10,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=761,164,0,0 1693232930359,164,HTTP Request,404,Not Found,Thread Group 1-1,,false,,150,152,9,9,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=573,164,0,0 1693232930524,169,HTTP Request,404,Not Found,Thread Group 1-1,,false,,150,152,9,9,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=335,169,0,0 1693232928574,3902,HTTP Request,404,Not Found,Thread Group 1-2,,false,,82,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=563,3902,0,0 1693232928577,3900,HTTP Request,404,Not Found,Thread Group 1-9,,false,,82,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=680,3900,0,0 1693232928573,3907,HTTP Request,404,Not Found,Thread Group 1-5,,false,,82,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=404,3907,0,0 1693232928576,3963,HTTP Request,404,Not Found,Thread Group 1-8,,false,,82,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=892,3963,0,0 1693232928572,3968,HTTP Request,404,Not Found,Thread Group 1-3,,false,,82,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=722,3968,0,0 1693232928574,3967,HTTP Request,404,Not Found,Thread Group 1-10,,false,,82,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=828,3967,0,0 1693232932479,164,HTTP Request,404,Not Found,Thread Group 1-9,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=957,164,0,0 1693232932477,168,HTTP Request,404,Not Found,Thread Group 1-2,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=227,168,0,0 1693232932540,169,HTTP Request,404,Not Found,Thread Group 1-3,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=517,169,0,0 1693232928576,4133,HTTP Request,404,Not Found,Thread Group 1-6,,false,,82,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=377,4133,0,0 1693232932539,173,HTTP Request,404,Not Found,Thread Group 1-8,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=465,173,0,0 1693232928574,4139,HTTP Request,404,Not Found,Thread Group 1-4,,false,,82,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=291,4139,0,0 1693232932714,163,HTTP Request,404,Not Found,Thread Group 1-8,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=206,163,0,0 1693232932713,166,HTTP Request,404,Not Found,Thread Group 1-4,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=548,166,0,0 1693232932809,163,HTTP Request,404,Not Found,Thread Group 1-2,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=584,163,0,0 1693232932879,164,HTTP Request,404,Not Found,Thread Group 1-4,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=253,164,0,0 1693232932972,162,HTTP Request,404,Not Found,Thread Group 1-2,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=138,162,0,0 1693232933043,165,HTTP Request,404,Not Found,Thread Group 1-4,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=843,165,0,0 1693232932480,746,HTTP Request,404,Not Found,Thread Group 1-5,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=737,746,0,0 1693232932541,738,HTTP Request,404,Not Found,Thread Group 1-10,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=761,738,0,0 1693232933135,163,HTTP Request,404,Not Found,Thread Group 1-2,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=617,163,0,0 1693232933209,165,HTTP Request,404,Not Found,Thread Group 1-4,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=957,165,0,0 1693232933226,165,HTTP Request,404,Not Found,Thread Group 1-5,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=628,165,0,0 1693232932643,748,HTTP Request,404,Not Found,Thread Group 1-9,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=388,748,0,0 1693232933279,164,HTTP Request,404,Not Found,Thread Group 1-10,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=213,164,0,0 1693232933293,162,HTTP Request,404,Not Found,Thread Group 1-6,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=337,162,0,0 1693232933374,167,HTTP Request,404,Not Found,Thread Group 1-4,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=441,167,0,0 1693232933391,164,HTTP Request,404,Not Found,Thread Group 1-9,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=871,164,0,0 1693232933391,168,HTTP Request,404,Not Found,Thread Group 1-5,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=469,168,0,0 1693232933443,170,HTTP Request,404,Not Found,Thread Group 1-10,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=216,170,0,0 1693232932878,738,HTTP Request,404,Not Found,Thread Group 1-8,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=758,738,0,0 1693232933456,164,HTTP Request,404,Not Found,Thread Group 1-6,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=812,164,0,0 1693232933555,168,HTTP Request,404,Not Found,Thread Group 1-9,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=239,168,0,0 1693232933560,167,HTTP Request,404,Not Found,Thread Group 1-5,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=712,167,0,0 1693232933620,163,HTTP Request,404,Not Found,Thread Group 1-6,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=857,163,0,0 1693232933066,741,HTTP Request,404,Not Found,Thread Group 1-3,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=991,741,0,0 1693232933723,165,HTTP Request,404,Not Found,Thread Group 1-9,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=325,165,0,0 1693232933727,164,HTTP Request,404,Not Found,Thread Group 1-5,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=457,164,0,0 1693232933784,163,HTTP Request,404,Not Found,Thread Group 1-6,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=545,163,0,0 1693232933782,166,HTTP Request,404,Not Found,Thread Group 1-10,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=572,166,0,0 1693232933807,166,HTTP Request,404,Not Found,Thread Group 1-3,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=828,166,0,0 1693232933299,740,HTTP Request,404,Not Found,Thread Group 1-2,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=917,740,0,0 1693232933888,168,HTTP Request,404,Not Found,Thread Group 1-9,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=706,168,0,0 1693232933892,165,HTTP Request,404,Not Found,Thread Group 1-5,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=840,165,0,0 1693232933892,166,HTTP Request,404,Not Found,Thread Group 1-4,,false,,150,152,8,8,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=716,166,0,0 1693232933947,164,HTTP Request,404,Not Found,Thread Group 1-6,,false,,150,152,7,7,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=111,164,0,0 1693232933948,164,HTTP Request,404,Not Found,Thread Group 1-10,,false,,150,152,7,7,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=889,164,0,0 1693232933975,164,HTTP Request,404,Not Found,Thread Group 1-3,,false,,150,152,7,7,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=357,164,0,0 1693232933970,171,HTTP Request,404,Not Found,Thread Group 1-8,,false,,150,152,7,7,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=811,171,0,0 1693232934056,165,HTTP Request,404,Not Found,Thread Group 1-9,,false,,150,152,7,7,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=508,165,0,0 1693232934057,171,HTTP Request,404,Not Found,Thread Group 1-5,,false,,150,152,7,7,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=390,171,0,0 1693232934111,163,HTTP Request,404,Not Found,Thread Group 1-6,,false,,150,152,7,7,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=792,163,0,0 1693232934112,172,HTTP Request,404,Not Found,Thread Group 1-10,,false,,150,152,7,7,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=766,172,0,0 1693232934143,165,HTTP Request,404,Not Found,Thread Group 1-8,,false,,150,152,7,7,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=321,165,0,0 1693232934139,187,HTTP Request,404,Not Found,Thread Group 1-3,,false,,150,152,7,7,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=326,187,0,0 1693232934203,164,HTTP Request,404,Not Found,Thread Group 1-2,,false,,150,152,7,7,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=991,164,0,0 1693232934229,166,HTTP Request,404,Not Found,Thread Group 1-5,,false,,150,152,5,5,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=582,166,0,0 1693232934274,161,HTTP Request,404,Not Found,Thread Group 1-6,,false,,150,152,4,4,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=180,161,0,0 1693232934285,163,HTTP Request,404,Not Found,Thread Group 1-10,,false,,150,152,3,3,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=900,163,0,0 1693232934308,166,HTTP Request,404,Not Found,Thread Group 1-8,,false,,150,152,2,2,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=725,166,0,0 1693232934326,164,HTTP Request,404,Not Found,Thread Group 1-3,,false,,150,152,1,1,https://getwebapi.azurewebsites.net/api/GetWebAPI?id=963,164,0,0  --- Summary results: --- summary =    100 in 00:00:16 =    6.4/s Avg:  1340 Min:   161 Max:  8580 Err:    88 (88.00%)  ---\n---\nFunction Code:\n---\nusing System; using System.IO; using System.Threading.Tasks; using Microsoft.AspNetCore.Mvc; using Microsoft.Azure.WebJobs; using Microsoft.Azure.WebJobs.Extensions.Http; using Microsoft.AspNetCore.Http; using Microsoft.Extensions.Logging; using Newtonsoft.Json; using System.Net.Http; using Microsoft.Azure.Cosmos; using System.ComponentModel; using Azure; using System.Collections.Generic; using System.Collections.Concurrent;  namespace GetWebAPI {     public static class GetWebAPI     {         private static readonly string cosmosDbEndpoint = Environment.GetEnvironmentVariable(\"DBENDPOINT\", EnvironmentVariableTarget.Process);         private static readonly string cosmosDbKey = Environment.GetEnvironmentVariable(\"DBKEY\", EnvironmentVariableTarget.Process);         private static readonly string databaseId = Environment.GetEnvironmentVariable(\"DBID\", EnvironmentVariableTarget.Process);         private static readonly string containerId = Environment.GetEnvironmentVariable(\"CONTAINERID\", EnvironmentVariableTarget.Process);         private static readonly CosmosClient cosmosClient = new CosmosClient(cosmosDbEndpoint, cosmosDbKey);         private static readonly Microsoft.Azure.Cosmos.Container cosmosContainer = cosmosClient.GetContainer(databaseId, containerId);          [FunctionName(\"GetWebAPI\")]         public static async Task<IActionResult> Run(             [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", Route = null)] HttpRequest req,             ILogger log)         {             try             {                 string id = req.Query[\"id\"];                  // Validate that the ID is provided                 if (string.IsNullOrEmpty(id))                 {                     return new BadRequestObjectResult(\"The 'id' query parameter is required.\");                 }                  // Retrieve the item from Cosmos DB                 var response = await cosmosContainer.ReadItemAsync<RequestDocument>(id, new PartitionKey(id));                  return new OkObjectResult(response.Resource);             }             catch (CosmosException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)             {                 return new NotFoundResult();             }             catch (Exception ex)             {                 log.LogError(ex, \"An error occurred while retrieving data from Cosmos DB.\");                 return new StatusCodeResult(StatusCodes.Status500InternalServerError);             }         }     }      public class RequestDocument     {         public string id { get; set; }         public string categoryId { get; set; }         public string categoryName { get; set; }         public string sku { get; set; }         public string name { get; set; }         public string description { get; set; }         public double Price { get; set; }         public List<Tag> tags { get; set; }     }      public class Tag     {         public string id { get; set; }         public string name { get; set; }     } }\n---\n----"},
            @{role = "assistant";content= "The current implementation is mostly correct, but it could be improved to avoid creating a new CosmosClient and container for each function invocation. Doing so would enhance your application's performance. \n\nThe static `CosmosClient` and `Container` objects should be initialized lazily to ensure that they're only created when the function is executed, not when the function app starts. This approach also allows for connection reuse, which can improve performance by reducing the time it takes to establish a connection to the Cosmos DB.\n\nHere's the improved implementation:\n\n```csharp\nusing System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Azure.WebJobs;\nusing Microsoft.Azure.WebJobs.Extensions.Http;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing System.Net.Http;\nusing Microsoft.Azure.Cosmos;\nusing System.ComponentModel;\nusing Azure;\nusing System.Collections.Generic;\nusing System.Collections.Concurrent;\n\nnamespace GetWebAPI\n{\n    public static class GetWebAPI\n    {\n        private static readonly Lazy<CosmosClient> lazyClient = new Lazy<CosmosClient>(InitializeCosmosClient);\n        private static readonly Lazy<Microsoft.Azure.Cosmos.Container> lazyContainer = new Lazy<Microsoft.Azure.Cosmos.Container>(() => InitializeCosmosContainer(lazyClient.Value));\n\n        [FunctionName(\"GetWebAPI\")]\n        public static async Task<IActionResult> Run(\n            [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", Route = null)] HttpRequest req,\n            ILogger log)\n        {\n            try\n            {\n                string id = req.Query[\"id\"];\n\n                // Validate that the ID is provided\n                if (string.IsNullOrEmpty(id))\n                {\n                    return new BadRequestObjectResult(\"The 'id' query parameter is required.\");\n                }\n\n                // Retrieve the item from Cosmos DB\n                var response = await lazyContainer.Value.ReadItemAsync<RequestDocument>(id, new PartitionKey(id));\n\n                return new OkObjectResult(response.Resource);\n            }\n            catch (CosmosException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)\n            {\n                return new NotFoundResult();\n            }\n            catch (Exception ex)\n            {\n                log.LogError(ex, \"An error occurred while retrieving data from Cosmos DB.\");\n                return new StatusCodeResult(StatusCodes.Status500InternalServerError);\n            }\n        }\n\n        private static CosmosClient InitializeCosmosClient()\n        {\n            string cosmosDbEndpoint = Environment.GetEnvironmentVariable(\"DBENDPOINT\", EnvironmentVariableTarget.Process);\n            string cosmosDbKey = Environment.GetEnvironmentVariable(\"DBKEY\", EnvironmentVariableTarget.Process);\n            return new CosmosClient(cosmosDbEndpoint, cosmosDbKey);\n        }\n\n        private static Microsoft.Azure.Cosmos.Container InitializeCosmosContainer(CosmosClient client)\n        {\n            string databaseId = Environment.GetEnvironmentVariable(\"DBID\", EnvironmentVariableTarget.Process);\n            string containerId = Environment.GetEnvironmentVariable(\"CONTAINERID\", EnvironmentVariableTarget.Process);\n            return client.GetContainer(databaseId, containerId);\n        }\n    }\n\n    public class RequestDocument\n    {\n        public string id { get; set; }\n        public string categoryId { get; set; }\n        public string categoryName { get; set; }\n        public string sku { get; set; }\n        public string name { get; set; }\n        public string description { get; set; }\n        public double Price { get; set; }\n        public List<Tag> tags { get; set; }\n    }\n\n    public class Tag\n    {\n        public string id { get; set; }\n        public string name { get; set; }\n    }\n}\n```\n\nThis code will create the `CosmosClient` and `Container` objects only once, when they are accessed for the first time, and reuse them for subsequent function invocations. This approach reduces the overhead of creating these objects for every function invocation and improves the performance of your function."},
            @{role = "user";content= "Provide improved implementation example taking into account the following:\n----\nJTL Results:\n---\nResult from the JTL file from the JMeter test in which are saved the errors and the description: --- timeStamp,elapsed,label,responseCode,responseMessage,threadName,dataType,success,failureMessage,bytes,sentBytes,grpThreads,allThreads,URL,Latency,IdleTime,Connect  --- Summary results: --- summary +     67 in 00:00:28 =    2.4/s Avg:  3796 Min:  2323 Max:  8718 Err:     0 (0.00%) Active: 10 Started: 10 Finished: 0 summary +     33 in 00:00:08 =    4.1/s Avg:  2350 Min:  2323 Max:  2441 Err:     0 (0.00%) Active: 0 Started: 10 Finished: 10 summary =    100 in 00:00:36 =    2.8/s Avg:  3319 Min:  2323 Max:  8718 Err:     0 (0.00%)  ---\n---\nFunction Code:\n---\nusing System; using System.IO; using System.Threading.Tasks; using Microsoft.AspNetCore.Mvc; using Microsoft.Azure.WebJobs; using Microsoft.Azure.WebJobs.Extensions.Http; using Microsoft.AspNetCore.Http; using Microsoft.Extensions.Logging; using Newtonsoft.Json; using System.Net.Http; using Microsoft.Azure.Cosmos; using System.ComponentModel; using Azure; using System.Collections.Generic; using System.Collections.Concurrent; using System.Linq;  namespace GetMean {     public static class GetMean     {         private static readonly string cosmosDbEndpoint = Environment.GetEnvironmentVariable(\"DBENDPOINT\", EnvironmentVariableTarget.Process);         private static readonly string cosmosDbKey = Environment.GetEnvironmentVariable(\"DBKEY\", EnvironmentVariableTarget.Process);         private static readonly string databaseId = Environment.GetEnvironmentVariable(\"DBID\", EnvironmentVariableTarget.Process);         private static readonly string containerId = Environment.GetEnvironmentVariable(\"CONTAINERID\", EnvironmentVariableTarget.Process);         private static readonly CosmosClient cosmosClient = new CosmosClient(cosmosDbEndpoint, cosmosDbKey);         private static readonly Microsoft.Azure.Cosmos.Container cosmosContainer = cosmosClient.GetContainer(databaseId, containerId);          [FunctionName(\"GetMean\")]         public static async Task<IActionResult> Run(             [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", Route = null)] HttpRequest req,             ILogger log)         {             ///*             try             {                 string country = req.Query[\"Country\"];                  // Validate that the country is provided                   if (string.IsNullOrEmpty(country))                 {                     return new BadRequestObjectResult(\"The 'Country' query parameter is required.\");                 }                  FeedIterator<Volcano> queryResultSetIterator = cosmosContainer.GetItemQueryIterator<Volcano>();                 double sum = 0;                 int count = 0;                  while (queryResultSetIterator.HasMoreResults)                 {                     FeedResponse<Volcano> currentResultSet = await queryResultSetIterator.ReadNextAsync();                      foreach (Volcano volcano in currentResultSet)                     {                         if (volcano.Country == country)                         {                             if (int.TryParse(volcano.Elevation, out int parsedElevation))                             {                                 sum += parsedElevation;                                 count++;                             }                             else                             {                                 log.LogWarning($\"Could not parse elevation '{volcano.Elevation}' for volcano '{volcano.VolcanoName}'. This elevation will be ignored.\");                             }                         }                     }                 }                   // If no volcanoes found, return not found                   if (count == 0)                 {                     return new NotFoundResult();                 }                  // Calculate the mean elevation                   double meanElevation = Math.Round(sum / count, 3);                   return new OkObjectResult(meanElevation);             }             catch (Exception ex)             {                 log.LogError(ex, \"An error occurred while retrieving data from Cosmos DB.\");                 return new StatusCodeResult(StatusCodes.Status500InternalServerError);             }         }         //*/     }     public class Volcano     {         public string VolcanoName { get; set; }         public string Country { get; set; }         public string Region { get; set; }         public Location Location { get; set; }         public string Elevation { get; set; }         public string Type { get; set; }         public string Status { get; set; }         public string LastKnownEruption { get; set; }         public string Id { get; set; }     }      public class Location     {         public string Type { get; set; }         public List<double> Coordinates { get; set; }     } }\n---\n----"},
            @{role = "assistant";content= "The improvement for this function code would be to optimize the CosmosDB queries. Rather than retrieving all documents and then filtering in the function code, you could add a SQL query to the `GetItemQueryIterator` method to filter at the CosmosDB level. This way, you only retrieve the documents that match the criteria, which could result in significant performance improvements when working with large data sets. \n\nHere is the improved implementation:\n\n```csharp\nusing System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Azure.WebJobs;\nusing Microsoft.Azure.WebJobs.Extensions.Http;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing System.Net.Http;\nusing Microsoft.Azure.Cosmos;\nusing System.ComponentModel;\nusing Azure;\nusing System.Collections.Generic;\nusing System.Collections.Concurrent;\nusing System.Linq;\n\nnamespace GetMean\n{\n    public static class GetMean\n    {\n        private static readonly string cosmosDbEndpoint = Environment.GetEnvironmentVariable(\"DBENDPOINT\", EnvironmentVariableTarget.Process);\n        private static readonly string cosmosDbKey = Environment.GetEnvironmentVariable(\"DBKEY\", EnvironmentVariableTarget.Process);\n        private static readonly string databaseId = Environment.GetEnvironmentVariable(\"DBID\", EnvironmentVariableTarget.Process);\n        private static readonly string containerId = Environment.GetEnvironmentVariable(\"CONTAINERID\", EnvironmentVariableTarget.Process);\n        private static readonly CosmosClient cosmosClient = new CosmosClient(cosmosDbEndpoint, cosmosDbKey);\n        private static readonly Microsoft.Azure.Cosmos.Container cosmosContainer = cosmosClient.GetContainer(databaseId, containerId);\n\n        [FunctionName(\"GetMean\")]\n        public static async Task<IActionResult> Run(\n            [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", Route = null)] HttpRequest req,\n            ILogger log)\n        {\n            try\n            {\n                string country = req.Query[\"Country\"];\n\n                // Validate that the country is provided\n                if (string.IsNullOrEmpty(country))\n                {\n                    return new BadRequestObjectResult(\"The 'Country' query parameter is required.\");\n                }\n\n                QueryDefinition queryDefinition = new QueryDefinition(\"SELECT * FROM c WHERE c.Country = @country\")\n                    .WithParameter(\"@country\", country);\n                FeedIterator<Volcano> queryResultSetIterator = cosmosContainer.GetItemQueryIterator<Volcano>(queryDefinition);\n\n                double sum = 0;\n                int count = 0;\n\n                while (queryResultSetIterator.HasMoreResults)\n                {\n                    FeedResponse<Volcano> currentResultSet = await queryResultSetIterator.ReadNextAsync();\n\n                    foreach (Volcano volcano in currentResultSet)\n                    {\n                        if (int.TryParse(volcano.Elevation, out int parsedElevation))\n                        {\n                            sum += parsedElevation;\n                            count++;\n                        }\n                        else\n                        {\n                            log.LogWarning($\"Could not parse elevation '{volcano.Elevation}' for volcano '{volcano.VolcanoName}'. This elevation will be ignored.\");\n                        }\n                    }\n                }\n\n                // If no volcanoes found, return not found\n                if (count == 0)\n                {\n                    return new NotFoundResult();\n                }\n\n                // Calculate the mean elevation\n                double meanElevation = Math.Round(sum / count, 3);\n                return new OkObjectResult(meanElevation);\n            }\n            catch (Exception ex)\n            {\n                log.LogError(ex, \"An error occurred while retrieving data from Cosmos DB.\");\n                return new StatusCodeResult(StatusCodes.Status500InternalServerError);\n            }\n        }\n    }\n\n    public class Volcano\n    {\n        public string VolcanoName { get; set; }\n        public string Country { get; set; }\n        public string Region { get; set; }\n        public Location Location { get; set; }\n        public string Elevation { get; set; }\n        public string Type { get; set; }\n        public string Status { get; set; }\n        public string LastKnownEruption { get; set; }\n        public string Id { get; set; }\n    }\n\n    public class Location\n    {\n        public string Type { get; set; }\n        public List<double> Coordinates { get; set; }\n    }\n}\n```\n\nThis will improve the performance of your function by reducing the amount of data retrieved from Cosmos DB and consequently reducing the execution time of the function."},
            @{role = "user";content= "Provide improved implementation example taking into account the following:\n----\nJTL Results:\n---\nResult from the JTL file from the JMeter test in which are saved the errors and the description: --- timeStamp,elapsed,label,responseCode,responseMessage,threadName,dataType,success,failureMessage,bytes,sentBytes,grpThreads,allThreads,URL,Latency,IdleTime,Connect 1693232845131,225,HTTP Request,500,Internal Server Error,Thread Group 1-2,,false,,162,722,10,10,https://fidelapp.azurewebsites.net/api/FiDelApp,225,0,0 1693232845851,160,HTTP Request,500,Internal Server Error,Thread Group 1-2,,false,,162,722,10,10,https://fidelapp.azurewebsites.net/api/FiDelApp,160,0,0 1693232846280,159,HTTP Request,500,Internal Server Error,Thread Group 1-7,,false,,162,722,6,6,https://fidelapp.azurewebsites.net/api/FiDelApp,159,0,0 1693232849108,223,HTTP Request,500,Internal Server Error,Thread Group 1-4,,false,,162,722,3,3,https://fidelapp.azurewebsites.net/api/FiDelApp,223,0,0 1693232849651,159,HTTP Request,500,Internal Server Error,Thread Group 1-4,,false,,162,722,3,3,https://fidelapp.azurewebsites.net/api/FiDelApp,159,0,0 1693232850366,228,HTTP Request,500,Internal Server Error,Thread Group 1-8,,false,,162,722,1,1,https://fidelapp.azurewebsites.net/api/FiDelApp,228,0,0 1693232850766,165,HTTP Request,500,Internal Server Error,Thread Group 1-8,,false,,162,722,1,1,https://fidelapp.azurewebsites.net/api/FiDelApp,165,0,0  --- Summary results: --- summary +     90 in 00:00:07 =   12.3/s Avg:   440 Min:   159 Max:  4814 Err:     5 (5.56%) Active: 3 Started: 10 Finished: 7 summary +     10 in 00:00:01 =    9.4/s Avg:   172 Min:   161 Max:   228 Err:     2 (20.00%) Active: 0 Started: 10 Finished: 10 summary =    100 in 00:00:08 =   11.9/s Avg:   413 Min:   159 Max:  4814 Err:     7 (7.00%)  ---\n---\nFunction Code:\n---\nusing System; using System.IO; using System.Threading.Tasks; using Microsoft.AspNetCore.Mvc; using Microsoft.Azure.WebJobs; using Microsoft.Azure.WebJobs.Extensions.Http; using Microsoft.AspNetCore.Http; using Microsoft.Extensions.Logging; using Newtonsoft.Json; using System.Net.Http; using Microsoft.Azure.Cosmos; using System.ComponentModel; using Azure; using System.Collections.Generic;  namespace FiDelApp {       public static class FiDelApp     {         private static readonly HttpClient httpClient = new HttpClient();         private static readonly string cosmosDbEndpoint = Environment.GetEnvironmentVariable(\"DBENDPOINT\", EnvironmentVariableTarget.Process);         private static readonly string cosmosDbKey = Environment.GetEnvironmentVariable(\"DBKEY\", EnvironmentVariableTarget.Process);         private static readonly string databaseId = Environment.GetEnvironmentVariable(\"DBID\", EnvironmentVariableTarget.Process);         private static readonly string containerId = Environment.GetEnvironmentVariable(\"CONTAINERID\", EnvironmentVariableTarget.Process);         private static readonly CosmosClient cosmosClient = new CosmosClient(cosmosDbEndpoint, cosmosDbKey);         private static readonly Microsoft.Azure.Cosmos.Container cosmosContainer = cosmosClient.GetContainer(databaseId, containerId);          [FunctionName(\"FiDelApp\")]         public static async Task<IActionResult> Run(             [HttpTrigger(AuthorizationLevel.Anonymous, \"post\", Route = null)] HttpRequest req,             ILogger log)         {             try             {                 string requestBody = await new StreamReader(req.Body).ReadToEndAsync();                  // Deserialize the JSON request body                 var requestDocument = JsonConvert.DeserializeObject<RequestDocument>(requestBody);                  // Validate that the ID is provided                 if (string.IsNullOrEmpty(requestDocument.id))                 {                     return new BadRequestObjectResult(\"The 'id' property is required.\");                 }                  // Insert the JSON document into Cosmos DB                 var response = await cosmosContainer.CreateItemAsync(requestDocument);                  return new OkObjectResult(\"Data inserted successfully! Well Done! (12/07/2023)\");             }             catch (Exception ex)             {                 log.LogError(ex, \"An error occurred while inserting data into Cosmos DB.\");                 return new StatusCodeResult(StatusCodes.Status500InternalServerError);             }         }     }     public class RequestDocument     {         public string id { get; set; }         public string categoryId { get; set; }         public string categoryName { get; set; }         public string sku { get; set; }         public string name { get; set; }         public string description { get; set; }         public double Price { get; set; }         public List<Tag> tags { get; set; }     }     public class Tag     {         public string id { get; set; }         public string name { get; set; }     } }\n---\n----"},
            @{role = "assistant";content= "One of the improvements that can be made to the function code is the addition of error handling for deserialization. If the incoming JSON payload is not in the expected format, the function will throw an exception which can result in a 500 Internal Server Error response. By adding error handling for this case, a 400 Bad Request response can be returned, which is more accurate. \n\nHere is the improved implementation:\n\n```csharp\nusing System; \nusing System.IO; \nusing System.Threading.Tasks; \nusing Microsoft.AspNetCore.Mvc; \nusing Microsoft.Azure.WebJobs; \nusing Microsoft.Azure.WebJobs.Extensions.Http; \nusing Microsoft.AspNetCore.Http; \nusing Microsoft.Extensions.Logging; \nusing Newtonsoft.Json; \nusing System.Net.Http; \nusing Microsoft.Azure.Cosmos; \nusing System.ComponentModel; \nusing Azure; \nusing System.Collections.Generic;\n\nnamespace FiDelApp \n{ \n    public static class FiDelApp \n    { \n        private static readonly HttpClient httpClient = new HttpClient(); \n        private static readonly string cosmosDbEndpoint = Environment.GetEnvironmentVariable(\"DBENDPOINT\", EnvironmentVariableTarget.Process); \n        private static readonly string cosmosDbKey = Environment.GetEnvironmentVariable(\"DBKEY\", EnvironmentVariableTarget.Process); \n        private static readonly string databaseId = Environment.GetEnvironmentVariable(\"DBID\", EnvironmentVariableTarget.Process); \n        private static readonly string containerId = Environment.GetEnvironmentVariable(\"CONTAINERID\", EnvironmentVariableTarget.Process); \n        private static readonly CosmosClient cosmosClient = new CosmosClient(cosmosDbEndpoint, cosmosDbKey); \n        private static readonly Microsoft.Azure.Cosmos.Container cosmosContainer = cosmosClient.GetContainer(databaseId, containerId);\n\n        [FunctionName(\"FiDelApp\")] \n        public static async Task<IActionResult> Run( \n            [HttpTrigger(AuthorizationLevel.Anonymous, \"post\", Route = null)] HttpRequest req, \n            ILogger log) \n        { \n            try \n            { \n                string requestBody = await new StreamReader(req.Body).ReadToEndAsync(); \n\n                // Try to deserialize the JSON request body \n                RequestDocument requestDocument;\n                try\n                {\n                    requestDocument = JsonConvert.DeserializeObject<RequestDocument>(requestBody);\n                }\n                catch (JsonException)\n                {\n                    return new BadRequestObjectResult(\"Could not deserialize the JSON payload. Please check the payload format.\");\n                }\n\n                // Validate that the ID is provided \n                if (string.IsNullOrEmpty(requestDocument.id)) \n                { \n                    return new BadRequestObjectResult(\"The 'id' property is required.\"); \n                } \n\n                // Insert the JSON document into Cosmos DB \n                var response = await cosmosContainer.CreateItemAsync(requestDocument); \n\n                return new OkObjectResult(\"Data inserted successfully! Well Done! (12/07/2023)\"); \n            } \n            catch (Exception ex) \n            { \n                log.LogError(ex, \"An error occurred while inserting data into Cosmos DB.\"); \n                return new StatusCodeResult(StatusCodes.Status500InternalServerError); \n            } \n        } \n    }\n\n    public class RequestDocument \n    { \n        public string id { get; set; } \n        public string categoryId { get; set; } \n        public string categoryName { get; set; } \n        public string sku { get; set; } \n        public string name { get; set; } \n        public string description { get; set; } \n        public double Price { get; set; } \n        public List<Tag> tags { get; set; } \n    } \n\n    public class Tag \n    { \n        public string id { get; set; } \n        public string name { get; set; } \n    } \n}\n```\n\nThis way, if the incoming JSON payload is not in the expected format, a 400 Bad Request response will be returned, providing the client with more accurate information about the error."}]
            @{ role = 'user'; content = (
              "----",  
              "JTL Results:",  
              "---",  
              "$jtlResults",
              "---",  
              "Function Code:",  
              "---",  
              "$functionCode",
              "---",  
              "----"  
            ) -join "`n"
            }
          )
          temperature = $temperature
          max_tokens = $tokens
        }
        $payloadJson = $payload | ConvertTo-Json

        # Make API request
        $headers = @{
            "Content-Type" = "application/json"
            "api-key" = $apiKey
        }
        $response = Invoke-RestMethod -Uri $apiUrl -Headers $headers -Method Post -Body $payloadJson
        # Process the API response as needed
        # For example, extract and utilize the generated text
        $generatedText = $response.choices[0].message.content
        #$generatedText = $response

        # Display the generated text
        Write-Host $generatedText

        $generatedText | Out-File "$(System.DefaultWorkingDirectory)/generatedText.md" -Encoding utf8

        # Save the user content to a file  
        $payload.messages[1].content | Out-File "$(System.DefaultWorkingDirectory)/userContent.txt" -Encoding utf8
    

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      addToPath: true
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      pip install requests
    displayName: 'Install requests'
  - task: PythonScript@0
    inputs:
      scriptSource: 'inline'
      script: |
        import requests
        
        bot_token = '6096186625:AAHcTptWfiK5CIAmSEcmjEtpfJA1oiKGR_Q'
        chat_id = '${{ parameters.chatid }}'
        document_paths = [r'$(System.DefaultWorkingDirectory)/generatedText.md',
                         r'$(System.DefaultWorkingDirectory)/userContent.txt']
        caption = '${{ parameters.caption }}'
        
        api_url = f'https://api.telegram.org/bot{bot_token}/sendDocument'
        
        for document_path in document_paths:
          with open(document_path, 'rb') as document:
              files = {'document': document}
              payload = {
                  'chat_id': chat_id,
                  'caption': caption
              }
              response = requests.post(api_url, files=files, data=payload)
        
        # Check the response status code or content for errors
        print(response.status_code, response.content)
