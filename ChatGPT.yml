
# stages:
# - stage: ChatGPT
#   displayName: ChatGPT stage
#   dependsOn: JMeterTest
#   condition: and(succeeded(), eq('${{ parameters.ChatGPT }}', 'true'))

parameters:
  - name: tokens
    type: number
    default: 1000
  - name: temperature
    type: number
    default: 0.7
  - name: apiKey
    type: string
    default: '4c7be06a162641039767063e4830a371'
  - name: apiUrl
    type: string
    default: 'https://apchatgpt.openai.azure.com/openai/deployments/gpt-chat/chat/completions?api-version=2023-03-15-preview'
  - name: EmailUsername
    type: string
    default: ''
  - name: EmailPassword
    type: string
    default: ''
  - name: EmailUsernameRecipient
    type: string
    default: 'alessandro.penco11@gmail.com'

jobs:
- job: Chat
  displayName: ChatGPT
  pool:
    vmImage: $(vmImageName)
  
  steps:
  - task: DownloadPipelineArtifact@2
    displayName: 'Download JTL Results Artifact'
    inputs:
      artifactName: 'JTLResults'
      targetPath: '$(System.DefaultWorkingDirectory)'
    
  - task: PowerShell@2
    displayName: 'Prepare JTL Results and Function Code'
    inputs:
      targetType: 'inline'
      script: |
        echo "Function Code:"
        cat $(System.DefaultWorkingDirectory)/*.cs
        cat $(System.DefaultWorkingDirectory)/*.cs > $(System.DefaultWorkingDirectory)/function_code.txt
        echo "JTL Results:"
        cat $(System.DefaultWorkingDirectory)/test_summary.jtl
        cat $(System.DefaultWorkingDirectory)/test_summary.jtl > $(System.DefaultWorkingDirectory)/jtl_results.txt

  - task: PowerShell@2
    displayName: 'List contents of DefaultWorkingDirectory'
    inputs:
      targetType: 'inline'
      script: |
        $directory = "$(System.DefaultWorkingDirectory)"
        Get-ChildItem -Path $directory

  - task: PowerShell@2
    displayName: 'Call ChatGPT API'
    inputs:
      targetType: 'inline'
      script: |
        $jtlResultsFile = "$(System.DefaultWorkingDirectory)/jtl_results.txt"
        $functionCodeFile = "$(System.DefaultWorkingDirectory)/function_code.txt"
        $apiKey = "${{ parameters.apiKey }}"
        $apiUrl = "${{ parameters.apiUrl }}"
        $tokens = "$(${{ parameters.tokens }})"
        $temperature = "$(${{ parameters.temperature }})"

        # Read JTL results
        $jtlResults = Get-Content -Path $jtlResultsFile

        # Read function code
        $functionCode = Get-Content -Path $functionCodeFile

        # Prepare payload for API request
         $payload = @{
            messages = @(
              @{ role = 'system'; content = 'You are a system that analyzes source code and JMeter results to assist any type of developer in enhancing and improving performance in the code.' },
              @{ role = 'user'; content = "Provide me exmaple on how could imporve the Function code, dased on Function code and JTL Results:\n----\nJTL Results:\n---\n$jtlResults\n---\nFunction Code:\n---\n$functionCode\n---\n----"}
            )
            temperature = $temperature
            max_tokens = $tokens
        }
        $payloadJson = $payload | ConvertTo-Json

        # Make API request
        $headers = @{
            "Content-Type" = "application/json"
            "api-key" = $apiKey
        }
        $response = Invoke-RestMethod -Uri $apiUrl -Headers $headers -Method Post -Body $payloadJson
        # Process the API response as needed
        # For example, extract and utilize the generated text
        $generatedText = $response.choices[0].message.content

        # Display the generated text
        Write-Host $generatedText

        $generatedText | Out-File "$(System.DefaultWorkingDirectory)/generatedText.txt" -Encoding utf8

  - task: PowerShell@2
    displayName: 'Send Telegram Notification'
    inputs:
      targetType: 'inline'
      script: |
        $telegramBotToken = '6096186625:AAHcTptWfiK5CIAmSEcmjEtpfJA1oiKGR_Q'
        $chatId = '549538016'
        $generatedText = Get-Content -Path "$(System.DefaultWorkingDirectory)/generatedText.txt"
        $message = @"
        The pipeline has completed successfully.
        Generated Text:
        ---
        $generatedText
        ---
        "@

        $uri = "https://api.telegram.org/bot$telegramBotToken/sendMessage"
        $body = @{
            chat_id = $chatId
            text = $message
        } | ConvertTo-Json

        Invoke-RestMethod -Uri $uri -Method Post -Body $body -ContentType 'application/json'
  
  - task: SendEmail@1
    inputs:
      SmtpServer: 'smtp.gmail.com'
      Port: '587'
      EnableSsl: true
      UserName: "$(${{ parameters.EmailUsername }})"
      Password: "$(${{ parameters.EmailPassword }})"
      From: "$(${{ parameters.EmailUsername }})"
      Recipient: "$(${{ parameters.EmailUsernameRecipient }})"
      Subject: 'Pipeline Notification'
      Body: |
        Hello,

        This email is sent from an Azure DevOps pipeline.

        Regards,
        Your Pipeline

      Attachments: '$(System.DefaultWorkingDirectory)/generatedText.txt'
