parameters:
  - name: tokens
    type: string
    default: '4000'
  - name: temperature
    type: string
    default: '0.7'
  - name: model
    type: string
    default: 'GPT4'
  - name: workingDir
    type: string
    default: '$(System.DefaultWorkingDirectory)'
  - name: caption
    type: string
    default: 'Checkout our suggestions!'
  - name: chatid
    type: string
    default: '549538016'
  - name: azSubscription
    type: string
    default: ''
    

jobs:
- job: OpenAi
  displayName: OpenAi
  pool:
    vmImage: 'windows-2019'
  
  steps:
  - task: DownloadPipelineArtifact@2
    displayName: 'Download JTL Results Artifact'
    inputs:
      artifactName: 'JTLResults'
      targetPath: '$(System.DefaultWorkingDirectory)'

  # - task: PowerShell@2
  #   displayName: 'Prepare JTL Results and Function Code'
  #   inputs:
  #     targetType: 'inline'
  #     script: |
  #       $workingDir = "${{ parameters.workingDir }}"
  #       echo "Function Code:"
  #       cat "$workingDir/*.cs"
  #       echo "JTL Results:"
  #       cat "$(System.DefaultWorkingDirectory)/TestResults.txt"

  - task: AzureKeyVault@2
    inputs:
      azureSubscription: '${{ parameters.azSubscription }}'
      KeyVaultName: 'DevEmpower'
      SecretsFilter: '${{ parameters.model }}-KEY,${{ parameters.model }}-URL'
      RunAsPreJob: false

  - task: PowerShell@2
    displayName: 'Call ChatGPT API'
    inputs:
      targetType: 'inline'
      script: |
        $jtlResultsFile = "$(System.DefaultWorkingDirectory)/TestResults.txt"  
        $functionCodeFile = "${{ parameters.workingDir }}/*.cs"  
        $apiKey = "$(${{ parameters.model }}-KEY)"
        $apiUrl = "$(${{ parameters.model }}-URL)"

        # Read JTL results
        $jtlResults = Get-Content -Path $jtlResultsFile

        # Read function code
        $functionCode = Get-Content -Path $functionCodeFile

        # Prepare payload for API request
        #"Provide me example on how could improve the snippet of code, based on Function code and JTL Results:",  
        #"Provide improved implementation example taking into account the following:",
        #'You are a system that analyzes source code and JMeter results to assist any type of developer in enhancing and improving performance in the code.'
        $payload = @{
          messages = @(
            @{ role = 'system'; content = '' },
            @{ role = 'user'; content = (
              "Provide improved implementation example taking into account the following:",
              "----",  
              "JTL Results:",  
              "---",  
              "$jtlResults",
              "---",  
              "Function Code:",  
              "---",  
              "$functionCode",
              "---",  
              "----"  
            ) -join "`n"
            }
          )
          temperature = $temperature
          max_tokens = $tokens
        }
        $payloadJson = $payload | ConvertTo-Json

        # Make API request
        $headers = @{
            "Content-Type" = "application/json"
            "api-key" = $apiKey
        }
        $response = Invoke-RestMethod -Uri $apiUrl -Headers $headers -Method Post -Body $payloadJson
        # Process the API response as needed
        # For example, extract and utilize the generated text
        $generatedText = $response.choices[0].message.content
        #$generatedText = $response

        # Display the generated text
        Write-Host $generatedText

        $generatedText | Out-File "$(System.DefaultWorkingDirectory)/generatedText.md" -Encoding utf8

        # Save the user content to a file  
        $payload.messages[1].content | Out-File "$(System.DefaultWorkingDirectory)/userContent.txt" -Encoding utf8
    

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      addToPath: true
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      pip install requests
    displayName: 'Install requests'
  - task: PythonScript@0
    inputs:
      scriptSource: 'inline'
      script: |
        import requests
        
        bot_token = '6096186625:AAHcTptWfiK5CIAmSEcmjEtpfJA1oiKGR_Q'
        chat_id = '${{ parameters.chatid }}'
        document_paths = [r'$(System.DefaultWorkingDirectory)/generatedText.md',
                         r'$(System.DefaultWorkingDirectory)/userContent.txt']
        caption = '${{ parameters.caption }}'
        
        api_url = f'https://api.telegram.org/bot{bot_token}/sendDocument'
        
        for document_path in document_paths:
          with open(document_path, 'rb') as document:
              files = {'document': document}
              payload = {
                  'chat_id': chat_id,
                  'caption': caption
              }
              response = requests.post(api_url, files=files, data=payload)
        
        # Check the response status code or content for errors
        print(response.status_code, response.content)
